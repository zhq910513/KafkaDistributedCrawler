启动主节点服务:
    打开终端并进入 主节点 目录：
        cd /project/主节点
    确保已经启动 Docker Compose,在 主节点 目录下运行以下命令来启动所有服务：
        docker-compose up -d
    这将启动 所有服务 容器，并自动加载配置文件。

验证服务:
    Prometheus：在浏览器中访问 http://localhost:9090 以验证 Prometheus 是否正确运行并加载配置。
    Grafana：在浏览器中访问 http://localhost:3000 以验证 Grafana 是否正确运行，并使用默认用户名 admin 和密码 admin 登录。

验证配置:
    Prometheus：
        在 Prometheus 界面，导航到 Status > Targets，确保所有目标（Targets）都在列表中并且状态为 UP。
        验证 Prometheus 是否从 Consul 动态发现 Kafka、Redis、和健康检查服务。
    Grafana：
        在 Grafana 界面，导航到 Configuration > Data Sources，确保 Prometheus 数据源已正确配置并正在从 http://prometheus:9090 获取数据。
        在 Dashboards 部分，查看自动加载的监控仪表板，并确保它们显示正确的监控数据。

更新 Python 文件和依赖:
    将新的 manager.py 或 resolver.py 文件直接放到相应的目录下（例如 ./指标监控/alert_manager 或 ./指标监控/alert_resolver），Docker 容器将自动使用更新后的文件。

更新依赖:
    如果需要更新 requirements.txt 文件，你可以将新的 requirements.txt 文件放到相应的目录下，然后重新启动容器中的服务（无需重新构建整个容器）。

重新启动容器中的服务:
    通过以下命令重新启动容器中的服务，以确保新的依赖和 Python 文件被加载：
        docker-compose restart alert_manager
        docker-compose restart alert_resolver
